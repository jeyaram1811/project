pragma solidity ^0.8.0;
// SPDX-License-Identifier: UNLICENSED

contract DrugTraceability {
    address public owner;

    struct Drug {
        uint id;
        string name;
        address manufacturer;
        address distributor;
        address pharmacy;
        bool isSold;
    }

    mapping(uint => Drug) public drugs;
    uint public drugCount;

    event DrugCreated(uint id, string name, address manufacturer);
    event DrugTransferred(uint id, address from, address to);
    event DrugSold(uint id, address pharmacy);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    function createDrug(string memory _name) public onlyOwner {
        drugCount++;
        drugs[drugCount] = Drug(drugCount, _name, msg.sender, address(0), address(0), false);
        emit DrugCreated(drugCount, _name, msg.sender);
    }

    function transferDrug(uint _id, address _to) public {
        Drug storage drug = drugs[_id];
        require(drug.manufacturer == msg.sender, "Only the manufacturer can transfer the drug");
        require(!drug.isSold, "The drug has already been sold");
        drug.distributor = _to;
        emit DrugTransferred(_id, msg.sender, _to);
    }

    function sellDrug(uint _id, address _pharmacy) public {
        Drug storage drug = drugs[_id];
        require(drug.distributor == msg.sender, "Only the distributor can sell the drug");
        require(!drug.isSold, "The drug has already been sold");
        drug.pharmacy = _pharmacy;
        drug.isSold = true;
        emit DrugSold(_id, _pharmacy);
    }
}
